{"version":3,"sources":["contexts/WeatherContextProvider.tsx","components/Form.tsx","components/Result.tsx","components/App.tsx","index.tsx"],"names":["WeatherContext","createContext","WeatherContextProvider","children","useState","weatherData","setWeatherData","inputValue","setInputValue","messageErr","setMessageErr","Provider","value","handleCitySubmit","e","preventDefault","API","process","fetch","then","response","ok","Error","json","data","obj","date","Date","toLocaleString","sunrise","sys","sunset","temp","main","pressure","wind","speed","city","catch","Form","useContext","onSubmit","onChange","target","placeholder","type","Result","content","Object","keys","length","sunriseTime","toLocaleTimeString","sunsetTime","className","App","ReactDOM","render","document","getElementById"],"mappings":"8JAyBaA,EAAiBC,wBAAc,IAuD7BC,EArDgB,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAsB,EAChBC,mBAAS,IADO,mBAC/CC,EAD+C,KAClCC,EADkC,OAElBF,mBAAS,IAFS,mBAE/CG,EAF+C,KAEnCC,EAFmC,OAGlBJ,mBAAS,IAHS,mBAG/CK,EAH+C,KAGnCC,EAHmC,KAqCtD,OACE,kBAACV,EAAeW,SAAhB,CACEC,MAAO,CACLP,cACAC,iBACAO,iBArCmB,SAACC,GACxB,GAAIP,EAAY,CACdO,EAAEC,iBACF,IAAMC,EAAG,4DAAwDT,EAAxD,kBAA4EU,mCAA5E,iBACTC,MAAMF,GACHG,MAAK,SAAAC,GACJ,GAAIA,EAASC,GAEX,OADAX,EAAc,IACPU,EAET,MAAME,MAAM,8BAEbH,MAAK,SAAAC,GAAQ,OAAIA,EAASG,UAC1BJ,MAAK,SAAAK,GACJ,IACMC,EAAM,CACVC,MAFW,IAAIC,MAAOC,iBAGtBC,QAASL,EAAKM,IAAID,QAClBE,OAAQP,EAAKM,IAAIC,OACjBC,KAAMR,EAAKS,KAAKD,KAChBE,SAAUV,EAAKS,KAAKC,SACpBC,KAAMX,EAAKW,KAAKC,MAChBC,KAAM9B,GAERD,EAAemB,MAEhBa,OAAM,WACL5B,EAAcH,QAWhBA,aACAC,gBACAC,eAGDN,ICtDQoC,EAlBF,WAAO,IAAD,EACuCC,qBACtDxC,GADMa,EADS,EACTA,iBAAkBL,EADT,EACSA,cAAeD,EADxB,EACwBA,WAIzC,OACE,0BAAMkC,SAAU,SAAA3B,GAAC,OAAID,EAAiBC,KACpC,2BACE4B,SAAU,SAAA5B,GAAC,OAAIN,EAAcM,EAAE6B,OAAO/B,QACtCgC,YAAY,6BACZC,KAAK,OACLjC,MAAOL,IAET,oECwBSuC,EArCA,WAAO,IAAD,EACiBN,qBAAWxC,GAAvCK,EADW,EACXA,YAAaI,EADF,EACEA,WACjBsC,EAAU,KAEd,GAAIC,OAAOC,KAAK5C,GAAa6C,OAAQ,CAAC,IAC5Bb,EAAsDhC,EAAtDgC,KAAMH,EAAgD7B,EAAhD6B,SAAUH,EAAsC1B,EAAtC0B,OAAQF,EAA8BxB,EAA9BwB,QAASG,EAAqB3B,EAArB2B,KAAMG,EAAe9B,EAAf8B,KAAMT,EAASrB,EAATqB,KAC/CyB,EAAc,IAAIxB,KAAe,IAAVE,GAAgBuB,qBACvCC,EAAa,IAAI1B,KAAc,IAATI,GAAeqB,qBAC3CL,EACE,yBAAKO,UAAU,UACb,wDAC2B,4BAAKjB,IAEhC,6BACA,wDAA8BX,GAC9B,6BACA,qDAA2BM,EAA3B,UACA,6BACA,qEAA8BmB,GAC9B,6BACA,qEAA8BE,GAC9B,6BACA,0DAA2BlB,EAA3B,QACA,6BACA,wDAAyBD,EAAzB,QACA,8BAKN,OACE,yBAAKoB,UAAU,UACZ7C,EAAa,gDAAsBA,GAAmBsC,IClB9CQ,EAXH,WACV,OACE,yBAAKD,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SCPRE,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.a27eaad3.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype WeatherContext = {\n  weatherData:\n    | {\n        city: string;\n        pressure: string;\n        sunset: number;\n        sunrise: number;\n        temp: string;\n        wind: string;\n        date: string;\n      }\n    | any;\n  setWeatherData: (obj: object) => void;\n  handleCitySubmit: (e: React.FormEvent) => void;\n  inputValue: string;\n  setInputValue: (val: string) => void;\n  messageErr: string;\n};\n\nexport const WeatherContext = createContext({} as WeatherContext);\n\nconst WeatherContextProvider = ({ children }: Props) => {\n  const [weatherData, setWeatherData] = useState({});\n  const [inputValue, setInputValue] = useState('');\n  const [messageErr, setMessageErr] = useState('');\n\n  const handleCitySubmit = (e: React.FormEvent) => {\n    if (inputValue) {\n      e.preventDefault();\n      const API = `https://api.openweathermap.org/data/2.5/weather?q=${inputValue}&APPID=${process.env.REACT_APP_API}&units=metric`;\n      fetch(API)\n        .then(response => {\n          if (response.ok) {\n            setMessageErr('');\n            return response;\n          }\n          throw Error('Nie udało się');\n        })\n        .then(response => response.json())\n        .then(data => {\n          const time = new Date().toLocaleString();\n          const obj = {\n            date: time,\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            temp: data.main.temp,\n            pressure: data.main.pressure,\n            wind: data.wind.speed,\n            city: inputValue,\n          };\n          setWeatherData(obj);\n        })\n        .catch(() => {\n          setMessageErr(inputValue);\n        });\n    }\n  };\n\n  return (\n    <WeatherContext.Provider\n      value={{\n        weatherData,\n        setWeatherData,\n        handleCitySubmit,\n        inputValue,\n        setInputValue,\n        messageErr,\n      }}\n    >\n      {children}\n    </WeatherContext.Provider>\n  );\n};\n\nexport default WeatherContextProvider;\n","import React, { useContext } from 'react';\nimport { WeatherContext } from '../contexts/WeatherContextProvider';\n\nconst Form = () => {\n  const { handleCitySubmit, setInputValue, inputValue } = useContext(\n    WeatherContext\n  );\n\n  return (\n    <form onSubmit={e => handleCitySubmit(e)}>\n      <input\n        onChange={e => setInputValue(e.target.value)}\n        placeholder=\"Wpisz nazwę miasta...\"\n        type=\"text\"\n        value={inputValue}\n      />\n      <button>Wyszukaj miejscowość</button>\n    </form>\n  );\n};\n\nexport default Form;\n","import React, { useContext } from 'react';\nimport { WeatherContext } from '../contexts/WeatherContextProvider';\n\nconst Result = () => {\n  const { weatherData, messageErr } = useContext(WeatherContext);\n  let content = null;\n\n  if (Object.keys(weatherData).length) {\n    const { city, pressure, sunset, sunrise, temp, wind, date } = weatherData;\n    const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\n    const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\n    content = (\n      <div className=\"result\">\n        <h3>\n          Wyniki wyszukiwania dla: <em>{city}</em>\n        </h3>\n        <hr />\n        <h4>Dane dla dnia i godziny: {date}</h4>\n        <hr />\n        <h4>Aktualna temperatura: {temp} °C</h4>\n        <hr />\n        <h4>Wschód słońca dzisiaj o: {sunriseTime}</h4>\n        <hr />\n        <h4>Zachód słońca dzisiaj o: {sunsetTime}</h4>\n        <hr />\n        <h4>Aktualna siła wiatru: {wind} m/s</h4>\n        <hr />\n        <h4>Aktualne ciśnienie: {pressure} hPa</h4>\n        <hr />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"result\">\n      {messageErr ? <h5>Nie mamy w bazie {messageErr}</h5> : content}\n    </div>\n  );\n};\n\nexport default Result;\n","import React from 'react';\nimport './App.css';\nimport Form from './Form';\nimport Result from './Result';\nimport WeatherContextProvider from '../contexts/WeatherContextProvider';\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <WeatherContextProvider>\n        <Form />\n        <Result />\n      </WeatherContextProvider>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}