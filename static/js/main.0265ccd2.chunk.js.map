{"version":3,"sources":["contexts/WeatherContextProvider.js","components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["WeatherContext","createContext","WeatherContextProvider","props","_useState","useState","_useState2","Object","slicedToArray","weatherData","setWeatherData","_useState3","_useState4","inputValue","setInputValue","_useState5","_useState6","messageErr","setMessageErr","react_default","a","createElement","Provider","value","handleCitySubmit","e","preventDefault","API","concat","process","fetch","then","response","ok","Error","json","data","obj","date","Date","toLocaleString","sunrise","sys","sunset","temp","main","pressure","wind","speed","city","catch","children","Form","_useContext","useContext","onSubmit","onChange","target","placeholder","type","Result","content","sunriseTime","toLocaleTimeString","sunsetTime","className","App","contexts_WeatherContextProvider","components_Form","components_Result","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0265ccd2.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react';\r\n\r\nexport const WeatherContext = createContext();\r\n\r\nconst WeatherContextProvider = (props) => {\r\n\r\n    const [weatherData, setWeatherData] = useState();\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [messageErr, setMessageErr] = useState('');\r\n\r\n    const handleCitySubmit = e => {\r\n        if (inputValue) {\r\n            e.preventDefault();\r\n            const API = `https://api.openweathermap.org/data/2.5/weather?q=${inputValue}&APPID=${process.env.REACT_APP_API}&units=metric`;\r\n            fetch(API)\r\n                .then(response => {\r\n                    if (response.ok) {\r\n                        setMessageErr('');\r\n                        return response;\r\n                    }\r\n                    throw Error('Nie udało się');\r\n                })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    const time = new Date().toLocaleString();\r\n                    const obj = {\r\n                        date: time,\r\n                        sunrise: data.sys.sunrise,\r\n                        sunset: data.sys.sunset,\r\n                        temp: data.main.temp,\r\n                        pressure: data.main.pressure,\r\n                        wind: data.wind.speed,\r\n                        city: inputValue,\r\n                    };\r\n                    setWeatherData(obj);\r\n                })\r\n                .catch(() => {\r\n                    setMessageErr(inputValue);\r\n                });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <WeatherContext.Provider value={{ weatherData, setWeatherData, handleCitySubmit, inputValue, setInputValue, messageErr }}>\r\n            {props.children}\r\n        </WeatherContext.Provider>\r\n    );\r\n}\r\n\r\nexport default WeatherContextProvider;","import React, { useContext } from 'react';\r\nimport { WeatherContext } from '../contexts/WeatherContextProvider';\r\n\r\nconst Form = () => {\r\n\r\n    const { handleCitySubmit, setInputValue, inputValue } = useContext(WeatherContext);\r\n\r\n    return (\r\n        <form onSubmit={e => handleCitySubmit(e)}>\r\n            <input onChange={e => setInputValue(e.target.value)} placeholder=\"Wpisz nazwę miasta...\" type=\"text\" value={inputValue} />\r\n            <button>Wyszukaj miejscowość</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form","import React, { useContext } from 'react';\r\nimport { WeatherContext } from '../contexts/WeatherContextProvider';\r\n\r\nconst Result = () => {\r\n\r\n    const { weatherData, messageErr } = useContext(WeatherContext);\r\n    let content = null;\r\n\r\n    if (weatherData) {\r\n        const { city, pressure, sunset, sunrise, temp, wind, date } = weatherData;\r\n        const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n        const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\r\n        content = (\r\n            <div className='result'>\r\n                <h3>Wyniki wyszukiwania dla: <em>{city}</em></h3>\r\n                <hr />\r\n                <h4>Dane dla dnia i godziny: {date}</h4>\r\n                <hr />\r\n                <h4>Aktualna temperatura: {temp} °C</h4>\r\n                <hr />\r\n                <h4>Wschód słońca dzisiaj o: {sunriseTime}</h4>\r\n                <hr />\r\n                <h4>Zachód słońca dzisiaj o: {sunsetTime}</h4>\r\n                <hr />\r\n                <h4>Aktualna siła wiatru: {wind} m/s</h4>\r\n                <hr />\r\n                <h4>Aktualne ciśnienie: {pressure} hPa</h4>\r\n                <hr />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='result'>\r\n            {messageErr ? <h5>Nie mamy w bazie {messageErr}</h5> : content}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Result","import React from 'react';\nimport './App.css';\nimport Form from './Form';\nimport Result from './Result';\nimport WeatherContextProvider from '../contexts/WeatherContextProvider';\n\nconst App = () => {\n\n    return (\n        <div className='app'>\n            <WeatherContextProvider>\n                <Form />\n                <Result />\n            </WeatherContextProvider>\n        </div>\n    )\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}