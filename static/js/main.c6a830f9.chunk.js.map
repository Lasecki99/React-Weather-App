{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","submit","action","onChange","change","placeholder","type","value","text","Result","_props$weather","weather","err","city","pressure","sunset","sunrise","temp","wind","date","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","className","APIKey","App","state","handleInputChange","e","_this","setState","target","handleCitySubmit","preventDefault","API","concat","fetch","then","response","ok","Error","json","data","time","toLocaleString","console","log","prevState","sys","main","speed","catch","components_Form","this","components_Result","error","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c6a830f9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = (props) => {\r\n    return (\r\n        <form onSubmit={props.submit} action=\"\">\r\n            <input onChange={props.change} placeholder=\"Wpisz nazwę miasta...\" type=\"text\" value={props.text} />\r\n            <button>Wyszukaj miejscowość</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form","import React from 'react';\r\n\r\nconst Result = (props) => {\r\n\r\n    const { err, city, pressure, sunset, sunrise, temp, wind, date } = props.weather\r\n\r\n    let content = null;\r\n\r\n    if (!err && city) {\r\n\r\n        const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString()\r\n        const sunsetTime = new Date(sunset * 1000).toLocaleTimeString()\r\n        content = (\r\n            <div className='result'>\r\n                <h3>Wyniki wyszukiwania dla: <em>{city}</em></h3>\r\n                <hr />\r\n                <h4>Dane dla dnia i godziny: {date}</h4>\r\n                <hr />\r\n                <h4>Aktualna temperatura: {temp} °C</h4>\r\n                <hr />\r\n                <h4>Wschód słońca dzisiaj o: {sunriseTime}</h4>\r\n                <hr />\r\n                <h4>Zachód słońca dzisiaj o: {sunsetTime}</h4>\r\n                <hr />\r\n                <h4>Aktualna siła wiatru: {wind} m/s</h4>\r\n                <hr />\r\n                <h4>Aktualne ciśnienie: {pressure} hPa</h4>\r\n                <hr />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='result'>\r\n            {err ? <h5>Nie mamy w bazie {city}</h5> : content}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Result","import React, { Component } from 'react';\nimport './App.css';\nimport Form from './Form'\nimport Result from './Result'\n//Klucz do API\nconst APIKey = 'cac3624fbb6c4e09bdee97290ecf4cec'\n\nclass App extends Component {\n\n    state = {\n        value: '',\n        date: '',\n        city: '',\n        sunrise: '',\n        temp: '',\n        pressure: '',\n        wind: '',\n        err: false,\n    }\n\n    handleInputChange = (e) => {\n        this.setState({\n            value: e.target.value\n        })\n    }\n    handleCitySubmit = (e) => {\n        e.preventDefault()\n        const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${APIKey}&units=metric`;\n        fetch(API)\n            .then(response => {\n                if (response.ok) {\n                    return response\n                }\n                throw Error('Nie udało się')\n            })\n            .then(response => response.json())\n            .then(data => {\n                const time = new Date().toLocaleString()\n                console.log(data)\n                this.setState(prevState => ({\n                    err: false,\n                    date: time,\n                    sunrise: data.sys.sunrise,\n                    sunset: data.sys.sunset,\n                    temp: data.main.temp,\n                    pressure: data.main.pressure,\n                    wind: data.wind.speed,\n                    city: prevState.value,\n                }))\n            })\n            .catch(err => {\n                console.log(err)\n                this.setState(prevState => ({\n                    err: true,\n                    city: prevState.value\n                }))\n            })\n    }\n\n    render() {\n        return (\n            <div className='app'>\n\n                <Form submit={this.handleCitySubmit} change={this.handleInputChange} text={this.state.value} />\n                <Result weather={this.state} error={this.state.err} />\n\n\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}